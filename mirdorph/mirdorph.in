#!@PYTHON@

# Copyright 2021 Raidro Manchester
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import signal
import gettext
import asyncio
import threading
import keyring
import discord
import logging
from discord.ext import commands

VERSION = '@VERSION@'
pkgdatadir = '@pkgdatadir@'
localedir = '@localedir@'

sys.path.insert(1, pkgdatadir)
signal.signal(signal.SIGINT, signal.SIG_DFL)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)

    def init_gtk(discord_loop, client, keyring_exists):
        logging.info("starting gtk")
        # Gettext works for the python part, locale for the xml part.
        import gettext
        import locale
        locale.bindtextdomain("mirdorph", localedir)
        locale.textdomain("mirdorph")
        gettext.textdomain("mirdorph")
        gettext.bindtextdomain("mirdorph", localedir)

        import gi
        gi.require_version('Gtk', '4.0')
        gi.require_version('Adw', '1')
        from gi.repository import Gio, Gtk, Adw

        resource = Gio.Resource.load(os.path.join(pkgdatadir, 'mirdorph.gresource'))
        resource._register()

        from mirdorph import main
        sys.exit(
            main.main(
                VERSION,
                discord_loop=discord_loop,
                discord_client=client,
                keyring_exists=keyring_exists
            )
        )

    def init_discord(discord_client, discord_token):
        if discord_token:
            cogs = [
                'mirdorph.disc_cogs.event_listening'
            ]

            for cog in cogs:
                discord_client.load_extension(cog)

            try:
                discord_client.run(discord_token, bot=False)
            except discord.errors.LoginFailure:
                keyring.delete_password("mirdorph", "token")
                from gi.repository import GLib, Gio
                GLib.idle_add(lambda *_ : Gio.Application.get_default().relaunch())

    logging.info("retrieving token")
    discord_token = keyring.get_password("mirdorph", "token")
    if discord_token is None:
        logging.info("token doesn't exist")
        keyring_exists = False
    else:
        logging.info("token exists")
        keyring_exists = True

    # If stuff breaks, drop intents and set fetch_offline_members to False again.
    intents = discord.Intents.all()
    client = commands.Bot(command_prefix="&&&", intents=intents, max_messages=100000000000000000,
                          fetch_offline_members=True, guild_subscriptions=True)

    discord_loop = asyncio.get_event_loop()
    gtk_thread = threading.Thread(target=init_gtk, args=(
        discord_loop, client, keyring_exists))
    gtk_thread.start()

    init_discord(client, discord_token)
